require(devtools)
install.packages("devtools")
require(devtools)
install_github('andreacirilloac/updateR')
updateR(admin_password = "130Blum")
library(updateR)
updateR(admin_password = "130Blum")
install.packages("ggplot2")
install.packages("reader")
install.packages("stats")
install.packages("ggplot2")
install.packages("broom")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("contrib.url")
ggsave?
a
?ggsave()
?ggsave
??ggsave
ggsave("../images/histogram-tv.pdf", plot = hist_TV)
library(ggplot2)
ggsave("../images/histogram-tv.pdf", plot = hist_TV)
data = read.csv("../data/Advertising.csv")
my.summary = function(x, na.rm=TRUE){
as.data.frame(cbind(Mean = mean(x, na.rm=na.rm),
SD = sd(x, na.rm=na.rm),
Median = median(x, na.rm=na.rm),
Min = min(x, na.rm=na.rm),
Max = max(x, na.rm=na.rm),
N = length(x)),
row.names = NULL)
}
stats_TV = my.summary(data$TV)
stats_Sales = my.summary(data$Sales)
hist_TV = ggplot(data = data, aes(data$TV)) +
geom_histogram(aes(fill = ..count..),
binwidth = 15) +
ggtitle("Histogram of TVs") +
xlab("TVs") +
ylab("Frequency")
hist_Sales = ggplot(data = data, aes(data$Sales)) +
geom_histogram(aes(fill = ..count..),
binwidth = 5) +
ggtitle("Histogram of Sales") +
xlab("Sales") +
ylab("Frequency")
ggsave("../images/histogram-tv.pdf", plot = hist_TV)
ggsave("../images/histogram-sales.pdf", plot = hist_Sales)
ggsave("../images/histogram-sales.png", plot = hist_Sales)
install.packages("broom", repos="http://cran.rstudio.com/")
?tidy
reg_short_summary
setwd("~/stat159/hw/stat159-fall2016-hw02/code")
data = read.csv("../data/Advertising.csv")
reg_TV.Sales = lm(Sales~TV, data = data)
reg_full_summary = summary(reg_TV.Sales)
reg_short_summary = tidy(reg_TV.Sales)
library(broom)
reg_short_summary = tidy(reg_TV.Sales)
reg_short_summary
reg_full_summary
reg_short_summary
ggsave("../images/scatterplot-tv-sales.pdf", scatterplot)
scatterplot = ggplot(data = data, aes(x = data$TV, y = data$Sales)) +
geom_point(aes(colour="#CC0000")) + # plot as points (scatterplot)
theme(legend.position = "none") + # remove unnecessary legend
geom_smooth(method = lm, aes(colour = "black")) + # regression line
ggtitle("Scatterplot of TV Ads and Sales") +
xlab("TV Ads") +
ylab("Sales") +
geom_segment(aes(x = data$TV, y = data$Sales, # add residual lines
xend = data$TV, yend = data$fitted,
color = "gray"))
ggsave("../images/scatterplot-tv-sales.pdf", scatterplot)
ggsave("../images/scatterplot-tv-sales.png", scatterplot)
scatterplot
ggplot(data = data, aes(x = data$TV, y = data$Sales)) +
geom_point(aes(colour="#CC0000")) + # plot as points (scatterplot)
theme(legend.position = "none") + # remove unnecessary legend
geom_smooth(method = lm, aes(colour = "black")) + # regression line
ggtitle("Scatterplot of TV Ads and Sales") +
xlab("TV Ads") +
ylab("Sales") +
geom_segment(aes(x = data$TV, y = data$Sales, # add residual lines
xend = data$TV, yend = data$fitted,
color = "gray"))
# call on plot
# plot
scatterplot = ggplot(data = data, aes(x = data$TV, y = data$Sales)) +
geom_point(aes(colour="#CC0000")) + # plot as points (scatterplot)
theme(legend.position = "none") + # remove unnecessary legend
geom_smooth(method = lm, aes(colour = "black")) + # regression line
ggtitle("Scatterplot of TV Ads and Sales") +
xlab("TV Ads") +
ylab("Sales") +
geom_segment(aes(x = data$TV, y = data$Sales, # add residual lines
xend = data$TV, yend = data$fitted,
color = "gray"))
# call on plot
ggplot(data = data, aes(x = data$TV, y = data$Sales)) +
geom_point(aes(colour="#CC0000")) + # plot as points (scatterplot)
theme(legend.position = "none") + # remove unnecessary legend
geom_smooth(method = lm, aes(colour = "black")) + # regression line
ggtitle("Scatterplot of TV Ads and Sales") +
xlab("TV Ads") +
ylab("Sales") +
geom_segment(aes(x = data$TV, y = data$Sales, # add residual lines
xend = data$TV, yend = data$fitted,
color = "gray"))
length(data$Sales)
length(data$fitted)
data = transform(data, fitted = fitted(reg_TV.Sales))
length(data$fitted)
ggplot(data = data, aes(x = data$TV, y = data$Sales)) +
geom_point(aes(colour="#CC0000")) + # plot as points (scatterplot)
theme(legend.position = "none") + # remove unnecessary legend
geom_smooth(method = lm, aes(colour = "black")) + # regression line
ggtitle("Scatterplot of TV Ads and Sales") +
xlab("TV Ads") +
ylab("Sales") +
geom_segment(aes(x = data$TV, y = data$Sales, # add residual lines
xend = data$TV, yend = data$fitted,
color = "gray"))
scatterplot = ggplot(data = data, aes(x = data$TV, y = data$Sales)) +
geom_point(aes(colour="#CC0000")) + # plot as points (scatterplot)
theme(legend.position = "none") + # remove unnecessary legend
geom_smooth(method = lm, aes(colour = "black")) + # regression line
ggtitle("Scatterplot of TV Ads and Sales") +
xlab("TV Ads") +
ylab("Sales") +
geom_segment(aes(x = data$TV, y = data$Sales, # add residual lines
xend = data$TV, yend = data$fitted,
color = "gray"))
ggsave("../images/scatterplot-tv-sales.pdf", scatterplot)
ggsave("../images/scatterplot-tv-sales.png", scatterplot)
sink("../data/eda-output.txt")
cat("Summary Statistics of TV ads and Sales\n\n")
cat("Statistics of TV Budgets")
stats_TV
cat("\n")
cat("Statistics of Product Sales")
stats_Sales
sink()
# Producing eda-output.txt
sink("../data/eda-output.txt")
cat("Summary Statistics of TV ads and Sales\n\n")
cat("Statistics of TV Budgets")
cat("\n")
stats_TV
cat("\n")
cat("Statistics of Product Sales")
cat("\n")
stats_Sales
sink()
setwd("~/stat159/hw/stat159-fall2016-hw02/data")
read.txt("data/eda-output.txt")
setwd("~/stat159/hw/stat159-fall2016-hw02/report")
read.txt("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt", header = TRUE)
?read.txt
?read.txt()
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt", header = TRUE)
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt")
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = "\t",
col.names = c("Mean", "SD", "Median", "Min", "Max", "N"),
fill = FALSE,
strip.white = TRUE)
?read.table()
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = "\t",
col.names = c("Mean", "SD", "Median", "Min", "Max", "N"),
fill = FALSE,
skip = 2)
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = "\t",
col.names = c("Mean", "SD", "Median", "Min", "Max", "N"),
fill = TRUE,
skip = 2)
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = "\t",
col.names = c("Mean", "SD", "Median", "Min", "Max", "N"),
fill = FALSE,
skip = 2)
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = "\t",
col.names = c("Mean", "SD", "Median", "Min", "Max", "N"),
fill = FALSE,
skip = 3)
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = "\t",
col.names = c("Mean", "SD", "Median", "Min", "Max", "N"),
fill = TRUE,
skip = 3)
```
stats_TV
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = " ",
col.names = c("Mean", "SD", "Median", "Min", "Max", "N"),
fill = TRUE,
skip = 3)
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = " ",
col.names = c(" ", "Mean", "SD", "Median", "Min", "Max", "N"),
fill = TRUE,
skip = 3)
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = " ",
col.names = c("1", "Mean", "SD", "Median", "Min", "Max", "N"),
fill = TRUE,
skip = 3)
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = " ",
col.names = c("NA", "Mean", "SD", "Median", "Min", "Max", "N"),
fill = TRUE,
skip = 3)
stats_TV = my.summary(data$TV)
stats_TV
class(stats_TV)
stats_TV$1
stats_TV[1]
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = " ",
col.names = c("Mean", "SD", "Median", "Min", "Max", "N"),
fill = TRUE,
skip = 3)
sink("../data/eda-output.txt")
cat("Statistics of TV Budgets")
cat("\n")
stats_TV
cat("\n")
cat("Statistics of Product Sales")
cat("\n")
stats_Sales
sink()
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = " ",
col.names = c("Mean", "SD", "Median", "Min", "Max", "N"),
fill = TRUE)
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = " ",
col.names = c("Mean", "SD", "Median", "Min", "Max", "N"),
fill = TRUE)
as.matrix(stats_TV)
View(as.matrix(stats_TV))
View(stats_TV)
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = "\t",
col.names = c("Mean", "SD", "Median", "Min", "Max", "N"),
fill = TRUE)
sink("../data/eda-output.txt")
cat("\n")
stats_TV
cat("\n")
cat("\n")
stats_Sales
sink()
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = "\t",
col.names = c("Mean", "SD", "Median", "Min", "Max", "N"),
fill = TRUE)
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = "\t",
col.names = c("Mean", "SD", "Median", "Min", "Max", "N"),
fill = FALSE)
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = "\t",
col.names = c("Mean", "SD", "Median", "Min", "Max", "N"),
fill = FALSE,
skip = 1)
sink("../data/eda-output.txt")
stats_TV
stats_Sales
sink()
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = "\t",
col.names = c("Mean", "SD", "Median", "Min", "Max", "N"),
fill = FALSE,
skip = 1)
read.table("~/stat159/hw/stat159-fall2016-hw02/data/eda-output.txt",
sep = "\t",
col.names = c("Mean", "SD", "Median", "Min", "Max", "N"),
fill = FALSE)
sink("../data/eda-output.txt")
cat("Statistics of TV Budget")
cat("/n")
stats_TV
cat("/n")
cat("Statistics of TV Budget")
cat("/n")
stats_Sales
sink()
# Producing eda-output.txt
sink("../data/eda-output.txt")
cat("Statistics of TV Budget")
cat("\n")
stats_TV
cat("\n")
cat("Statistics of TV Budget")
cat("\n")
stats_Sales
sink()
install.packages("xtable")
library(xtable)
read_chunk("../data/regression.RData")
?read_chunk
library(knit)
library(knitr)
read_chunk("../data/regression.RData")
read_chunk("../code/eda-script.R")
read_chunk("../code/eda-script.R")
stats_TV
<<stats_TV>>
regression <- read.table("~/stat159/hw/stat159-fall2016-hw02/data/regression.RData", quote="\"")
View(regression)
load("../data/regression.RData")
load("../code/eda-script.R")
reg_quality
read.table("../data/eda-output.txt")
sink("../data/eda-output.txt")
cat("Statistics of TV Budget")
cat("\n")
stats_TV
cat("\n")
cat("Statistics of Sales")
cat("\n")
stats_Sales
sink()
# setting up libraries and packages
#install.packages("ggplot2", repos="http://cran.rstudio.com/")
#install.packages("reader", repos="http://cran.rstudio.com/")
library(ggplot2)
data = read.csv("../data/Advertising.csv")
# Summary Statistics Function
my.summary = function(x, na.rm=TRUE){
as.data.frame(cbind(Mean = mean(x, na.rm=na.rm),
SD = sd(x, na.rm=na.rm),
Median = median(x, na.rm=na.rm),
Min = min(x, na.rm=na.rm),
Max = max(x, na.rm=na.rm),
N = length(x)),
row.names = NULL)
}
# Summary Statistics Table
stats_TV = my.summary(data$TV)
stats_Sales = my.summary(data$Sales)
# Histogram for TVs
hist_TV = ggplot(data = data, aes(data$TV)) +
geom_histogram(aes(fill = ..count..),
binwidth = 15) +
ggtitle("Histogram of TVs") +
xlab("TVs") +
ylab("Frequency")
# Histogram for Sales
hist_Sales = ggplot(data = data, aes(data$Sales)) +
geom_histogram(aes(fill = ..count..),
binwidth = 5) +
ggtitle("Histogram of Sales") +
xlab("Sales") +
ylab("Frequency")
# Save Histograms
ggsave("../images/histogram-tv.pdf", plot = hist_TV)
ggsave("../images/histogram-tv.png", plot = hist_TV)
ggsave("../images/histogram-sales.pdf", plot = hist_Sales)
ggsave("../images/histogram-sales.png", plot = hist_Sales)
# Producing eda-output.txt
sink("../data/eda-output.txt")
cat("Statistics of TV Budget")
cat("\n")
stats_TV
cat("\n")
cat("Statistics of Sales")
cat("\n")
stats_Sales
sink()
load("../images/histogram-tv.png")
library(png)
library(grid)
histogram_tv <- readPNG("../images/histogram-tv.png")
install.packages("png")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
library(png)
library(grid)
histogram_tv <- readPNG("../images/histogram-tv.png")
grid.raster(histogram_tv)
?readPNG
?grid.master
?grid
load("../data/regression.RData")
import_reg = xtable(reg_TV.Sales)
library(xtable)
import_reg = xtable(reg_TV.Sales)
print.xtable(import_reg)
install.packages("stargazer")
library(stargazer)
?stargazer
?knitr
library(stargazer)
reg_full_summary
stargazer(reg_full_summary, out = "table1.tex")
reg_full_summary$coefficients
stargazer(reg_full_summary, out = "table1.tex")
print(xtable(reg_full_summary), type = "latex", comment = FALSE)
print(xtable(reg_full_summary), out = "summary.tex", type = "latex", comment = FALSE)
summary.tex
?print
?grid.master
?grid
